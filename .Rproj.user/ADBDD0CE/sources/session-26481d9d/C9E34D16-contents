---
title: "EDLD 652 Final Project by Mallory Pennington"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
---

```{r setup, include=FALSE}
library(flexdashboard)
library(rio)
library(here)
library(tidyverse)
library(gghighlight)
library(scales)

data = read.csv("replication.csv")
```

Descriptives 
=================

Introduction to the data {.sidebar}
--------------------------------

Data was collected in "The lure of counterfactual curiosity: people incur a cost to experience
regret" (FitzGibbon, Komiya, & Murayama, 2021). Access to the study and data via the Open Science Foundation can be found [here](https://osf.io/jm3uc). The data included 361 participants.
The present experiment was a replication of similar experiments by FitzGibbon and colleagues
(FitzGibbon, Komiya, & Murayama, 2021). The study was conducted online through Prolific and
participants completed BART (Ballon Analogue Risk Task) trials of a balloon-pumping game
that involved pumping a balloon for points with the potential to "over-fill" the balloon and have
it pop (bust). If the balloon was not pumped past its limit, participants banked those points
(bank). Participants completed 10 BART trials as practice, then one "critical trial" where a
real-life monetary reward was involved (20 pence per pump, provided they banked). Participants
rated their emotions on a visual scale (happy face to sad face, left to right, scored from -200 to
200) after each trial, but only after the critical trial were they asked if they wished to see the
balloon's limit (after they banked only). The "cost" of choosing to see the balloon's limit
retroactively was waiting time (30 s). The balloon's limit in each trial was randomly determined
by pulling from a uniform distribution between 0 (burst after 1 pump) and 12 (not burst after 12
pumps). Both participants who did and who did not choose to wait and see the balloon's limit
retroactively then rated their emotions once again on the same scale.
Variables in the dataset include the number of pumps by each participant, whether the participant
banked or busted, whether a banking participant chose to see the balloon’s limit, participants’
emotional ratings both before and after seeing results, how many winnings a participant earned,
and the difference between banking participants’ number of pumps and total possible number of
pumps on a given trial.


Column {data-width=350}
-----------------------------------------------------------------------

### Initial emotion rating

```{r}
p1 = ggplot(data, aes(x=n_pumps, y=emo_rating_1, color=outcome))
p1 + geom_point() + geom_jitter() + theme_minimal() + labs(title = "Initial Emotional Rating post-trial vs. Number of pumps", subtitle = "Emotion ratings range from -200 to 200, with more negative ratings indicating more negative emotional state.", x="Number of pumps", y="Emotion rating", color="Outcome") + scale_x_continuous(breaks=pretty_breaks())
```


Column {data-width=350}
-----------------------------------------------
### Gender

```{r}
p2 = ggplot(data, aes(x=gender, fill=outcome))

p2 + geom_bar(position = position_dodge()) + theme_minimal() + labs(title="Outcome of trial by gender", x="Gender Identity", y = "Number of participants", fill="Outcome") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
```


Disappointment and pump limit 
======================

Column {data-width=350}
-----------------------------------------------------------------------

### Disappointment vs. pump limit

```{r}
data2 = data %>% 
  filter(outcome == "bank") %>% 
  mutate(limit_diff = limit-n_pumps)

p3 = ggplot(data2, aes(x=limit_diff, y=emo_diff, size=winnings, alpha=winnings))
p3 + geom_point() + geom_jitter() + geom_smooth(method ='lm', show.legend=FALSE) + theme_minimal() + labs(title="Disappointment vs. distance left to the pump limit", x="Difference between pump maximum and # of pumps", y="Change in emotion rating", alpha="Winnings", size="Winnings") + scale_x_continuous(breaks=pretty_breaks())
```

### (Another iteration, without winnings)
```{r}
p9 = ggplot(data2, aes(x=limit_diff, y=emo_diff))

p9 + geom_point() + geom_jitter() + geom_smooth(method ='lm', show.legend=FALSE) + theme_minimal() + labs(title="Disappointment vs. distance left to the pump limit", x="Difference between pump maximum and # of pumps", y="Change in emotion rating") + scale_x_continuous(breaks=pretty_breaks())
```


Column {data-width=350}
-----------------------------------------------------------------------

### What about participants who decided to seek the true pump limit, vs. those who didn't?

```{r}
p4 = ggplot(data2, aes(x=limit_diff, y=emo_diff, color=information_seeking, size=winnings, alpha=winnings))

p4 + geom_point() + geom_jitter() + geom_smooth(method='lm', show.legend=FALSE) + theme_minimal() + labs(title="Disappointment over pump limit by whether true pump limit was sought", x="Difference between pump maximum and # of pumps", y="Change in emotion rating", color="Information sought?", size="Winnings", alpha="Winnings") + scale_x_continuous(breaks=pretty_breaks())
```

### (Another iteration, without winnings)

```{r}
p10 = ggplot(data2, aes(x=limit_diff, y=emo_diff, color=information_seeking))

p10 + geom_point() + geom_jitter() + geom_smooth(method='lm', show.legend=FALSE) + theme_minimal() + labs(title="Disappointment over pump limit by whether true pump limit was sought", x="Difference between pump maximum and # of pumps", y="Change in emotion rating", color="Information sought?") + scale_x_continuous(breaks=pretty_breaks())
```



Disappointment and winnings {data-orientation=rows}
====================== 

Row {data-height=600}
-----------------------------------------------------------------------

### Emotions across time

```{r}
test1 = subset(data, select = -emo_rating_2)
test2 = subset(data, select = -emo_rating_1)

test1 = test1 %>% 
  mutate(time = 1) %>% 
  rename("emo_rating" = "emo_rating_1")

test2 = test2 %>% 
  mutate(time = 2) %>% 
  rename("emo_rating" = "emo_rating_2")

test = rbind(test1, test2)

test = test %>% 
  filter(outcome=="bank")
rr1 = test %>% 
  filter(time=="1")
rr2 = test %>% 
  filter(time=="2")


m1 = mean(rr1$emo_rating)
m2 = mean(rr2$emo_rating, na.rm=TRUE)
mw = mean(data$winnings, na.rm=TRUE)
mm = mean(data$missed, na.rm = TRUE)


p5 = ggplot(test, aes(x = time, y = emo_rating))

#with avg

p5 + geom_point(alpha=0.5) + geom_line(aes(group=subject), lty=3, alpha=0.5) + geom_point(aes(x=1, y=m1), color="red") + geom_point(aes(x=2, y=m2), color="red") + geom_segment(aes(x=1, y=m1, xend=2, yend=m2), color="red", size=2) + theme_minimal() + labs(title="Average emotion rating before and after information seeking time period", subtitle="Banked participants only. Red represents mean at each time point.", x="Time point", y="Emotion rating") + scale_x_continuous(breaks=c(1, 2)) + theme(panel.background = element_blank())

```


Row {data-height=350}
-----------------------------------------------------------------------

### Winnings less than average
```{r}
#when winnings less than avg
p5 + geom_point(color = "red") + geom_line(aes(group=subject), lty=1, color = "red")  + gghighlight(winnings < mw) + theme_minimal() + labs(x = "Time point", y="Emotion rating") + scale_x_continuous(breaks=c(1, 2)) + theme(panel.background = element_blank())
```

### Winnings greater than average
```{r}
#when winnings greater than avg
p5 + geom_point(color = "green") + geom_line(aes(group=subject), lty=1, color = "green")  + gghighlight(winnings > mw) + theme_minimal() + labs(x = "Time point", y="Emotion rating") + scale_x_continuous(breaks=c(1, 2)) + scale_x_continuous(breaks=c(1, 2)) + theme(panel.background = element_blank())
```

### Missed pumps less than average
```{r}
#when missed less than avg
p5 + geom_point(color = "violet") + geom_line(aes(group=subject), lty=1, color = "violet")  + gghighlight(missed < mm) + theme_minimal() + labs(x = "Time point", y="Emotion rating") + scale_x_continuous(breaks=c(1, 2)) + scale_x_continuous(breaks=c(1, 2)) + theme(panel.background = element_blank())
```

### Missed pumps greater than average
```{r}
#when missed greater than avg
p5 + geom_point(color = "cyan") + geom_line(aes(group=subject), lty=1, color = "cyan")  + gghighlight(missed > mm) + theme_minimal() + labs(x = "Time point", y="Emotion rating") + scale_x_continuous(breaks=c(1, 2)) + theme(panel.background = element_blank())
```

```

